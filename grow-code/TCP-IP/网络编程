【网络编程第一天】
TCP/IP协议:
    TCP/IP协议中的四层分别为:应用层、传输层、网络层、链路层,每层分别负责不同的通信功能
    链路层:链路层是用来定义物理传输通道,通常是用来定义某些网络连接设备的驱动协议,例如针对光纤、网线提供的驱动
    网络层:网络层是整个TCP/IP协议的核心,它主要用于将传输的数据进行分组,将分组数据发到目标计算机或者网络
    传输层:主要是网络程序进行通信,在进行网络通信时,可以采用TCP协议,也可以采用UDP协议
    应用层:主要负责应用程序的协议,例如HTTP协议,FTP协议
        关键词:网络传输协议  TCP/IP协议  HTTP协议

IP地址和端口号
    要想使网络中的计算机能够进行通信,必须为每台计算机制定一个标识,通过这个标识号来指定接受数据的计算机或者发送数据的计算
    机,这个标识号就是IP地址.它可以唯一标识一台计算机(TCP协议中,这个标识号就是IP地址)
    通过IP地址可以连接到指定的计算机,但是如果想要访问目标计算机中的某个应用程序,就需要指定的端口号

java.net.InetAddress:这个类表示互联网的IP地址
    静态方法:
        InetAddress     .getLocalHost()    .LocalHost()本地主机
        返回值就是InetAddress对象
    非静态方法:
        String getHostAddress()获取主机IP地址
        String getHostName() 获取主机名

介绍TCP/IP结构时,提到传输层的两个重要的高级协议,分别是UDP和TCP,UDP称为用户数据包协议,TCP称为传输控制协议
    UDP:
    特点:是无连接通信协议,协议消耗资源小,通信效率高.但是由于udp的面向无连接性,不能保证数据的完整性,因此在传输重要数据时
    不建议使用UDP协议.64kb,是UDP协议规定的可发送最大文件大小
    TCP:
    特点:面向连接的通信协议,需要在传输数据之前现在发送端和接收端简历逻辑连接,然后在传输数据,提供了两台计算机之间可靠的,
    无差错的数据传输.
        TCP协议的三次握手:
            客户端 -> 服务器端:发出连接请求,等待服务器确认
            服务器端 -> 客户端:回送响应,通知客户端收到连接请求
            客户端 -> 服务器端:发送确认信息,确认连接

【套接字:就是绑定了IP号和端口号的网络对象就是套接字】
------------------------------------------------------------------------------------------------------------------------
UDP通信(发送端,接收端)
    实现UDP协议的发送端:
        实现封装数据的类 DatagramPacket  将数据包装
        实现发送数据的类 DatagramSocket  将数据包发送出去
        实现步骤
            1,创建DatagramPacket对象,封装数据,接受的地址和端口
            2,创建DatagramSocket
            3,调用DatagramSocket类的send方法,发送数据包
            4,释放资源


    实现UDP协议的接收端
        实现封装数据包 DatagramPacket  将数据接收
        实现输出传输   DatagramSocket  接收数据包
        实现步骤:
            1,创建DatagramSocket对象,绑定端口号(要和发送端端口号一致)
            2,创建字节数组,接收发来的数据
            3,创建数据包对象DatagramPacket
            4,调用DatagramSocket对象方法receive(DatagramPacket dp)接收数据,数据放在数据包中
            5,拆包
                发送的IP地址
                    数据包对象DatagramPacket的方法.getAddress()是获取发送端的IP地址对象,返回值是InetAddress类的对象,
                    得到这个对象之后可以使用getHostAddress()方法就可以获取到IP地址
                接收到的字节个数
                    数据包对象DatagramPacket的方法 .getLength()
                发送方的端口号
                    数据包对象DatagramPacket的方法 .getPort()获取发送方得端口号
            6,释放资源

------------------------------------------------------------------------------------------------------------------------
TCP通信
    TCP通信和UDP通信一样,都能够实现两台计算机之间的通信,通信的两端都需要创建Socket对象
    区别:
        UDP只存在接收端和发送端,不区分客户端和服务器端,计算机之间可以任意的发送数据
        但是TCP通信是严格的区分客户端和服务器端的,在通信时,必须要客户端去连接服务器端才能实现通信,服务器端不可以主动去连
        接客户端(服务器端只有一个,客户端可以有很多个,所以只有客户端访问服务器端)
        在jdk当中提供了两个类用于实现TCP程序,一个是ServerSocket类,用于表示服务器端,另一个是Socket类,用于表示客户端
            客户端:客户端程序称之为Socket类
            服务器:服务器端程序称之为ServerSocket类

    客户端:
        构造方法  Socket(String host,int port),传递服务器的IP和端口号
        注意:只要构造方法运行就会和服务器进行连接,连接失败则抛出异常

        OutputStream   getOutputStream()  返回套接字的输出流
            作用:将数据输出,输出到服务器
        InputStream    getInputStream()   返回套接字的输入流
            作用:从服务器端读取数据

    客户端服务器数据交换,必须使用套接字对象Socket中获取的IO流,不能够自己new流!互联网上必须要用socket套接字来获取流对象

    服务器的连接对象我们称之为服务器的套接字
    客户端的连接对象我们称之为客户端的套接字
    服务器获取客户端的socket是用的accept()方法

    实现TCP图片上传到客户端
        实现步骤:
        1,Socket套接字连接到服务器
        2,通过Socket获取字节输出流,写图片
        3,使用自己的流对象,读取图片数据源
            FileInputStream
        4,读取图片,使用字节输出流,写入到服务器
            采用字节数组进行缓冲
        5,通过Socket套接字获取字节输入流
            读取服务器发回来的上传成功
        6,关闭资源

    实现TCP图片上传到服务器
        实现步骤:
            1,通过ServerSocket套接字对象,监听端口号
            2,通过accept()方法,获取客户端的连接对象
            3,客户端的连接对象获取字节输入流,读取客户端上传的图片
            4,创建File对象,绑定上传文件
                判断文件夹是否存在,不存在,则创建
            5,创建字节输出流,数据目的:File对象所在的文件夹
            6,字节流读取图片,字节流将图片写入到目的文件夹中
            7,将上传成功回写到客户端
            8,关闭资源


